<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.socket.socketjava.mapper.FriendsMapper">

    <select id="selectByReceiverId" resultType="com.socket.socketjava.domain.vo.Notifications.AcceptFriendVo"
            parameterType="java.lang.Integer">
        select f.relation_id,
               f.user_id,
               u.username,
               u.number,
               u.avatar_url,
               n.content,
               n.created_at,
               f.status
        from friends f
                 join users u on f.user_id = u.user_id
                 join notifications n on n.related_id = f.relation_id
        where f.friend_id = #{userId}
          and n.type = 'friend'
        order by n.created_at desc
    </select>


    <select id="selectFriendsList" resultType="com.socket.socketjava.domain.vo.Friends.FriendVo">
        SELECT f.relation_id       relationId,
               f.friend_id         friendId,
               f.status         AS relationStatus,
               f.is_pinned      AS isPinned,
               u.username,
               u.number,
               u.avatar_url     AS avatarUrl,
               u.status         AS userStatus,
               MAX(m.sent_time) AS lastMessageTime
        FROM friends f
                 JOIN users u ON
            f.user_id = #{userId} AND u.user_id = f.friend_id
                 LEFT JOIN messages m ON
            ((f.user_id = m.sender_id AND f.friend_id = m.receiver_id AND m.deleted_by_sender = 0)
                OR (f.user_id = m.receiver_id AND f.friend_id = m.sender_id AND m.deleted_by_receiver = 0))
        WHERE f.user_id = #{userId}
          AND f.status = 1
        GROUP BY f.relation_id, f.user_id, f.friend_id, f.status, f.is_pinned, u.username, u.number, u.avatar_url, u.status
        ORDER BY f.is_pinned DESC, lastMessageTime DESC;
    </select>
    <select id="getMessageCount" resultType="java.lang.Integer">
        select COUNT(*)
        from messages
        where receiver_id = #{userId}
          and sender_id = #{friendId}
          and is_read = 0
    </select>
    <select id="getFriendByRelationId" resultType="java.lang.Integer"
            parameterType="java.lang.Integer">
        SELECT CASE
                   WHEN user_id = #{userId} THEN friend_id
                   WHEN friend_id = #{userId} THEN user_id
                   END AS result
        FROM friends
        WHERE relation_id = #{relationId};
    </select>
    <select id="userIsFriend" resultType="java.lang.Integer">
        SELECT COALESCE(
                       (SELECT 1
                        FROM friends f
                        WHERE (f.user_id = #{userId} AND f.friend_id = #{friendId}  and f.status = 1)
                           OR (f.user_id = #{friendId} AND f.friend_id = #{userId}) and f.status = 1), 0)
                   AS result;
    </select>


</mapper>
